{"version":3,"sources":["webpack://react-dash/./src/Pages/Home/index.js","webpack://react-dash/./src/Pages/About/index.js","webpack://react-dash/./src/Boot/Router/index.js","webpack://react-dash/./src/Components/Header/index.js","webpack://react-dash/./src/Boot/App/index.js","webpack://react-dash/./src/bootstrap.js"],"names":["onNavigate","onParentNavigate","path","to","history","initialPath","element","document","mount","memoryHistory","createMemoryHistory","location","fullpath","ReactDOM","createBrowserHistory","fullPath","search"],"mappings":"iKAMA,QAJA,WACE,OAAO,0BAAP,gBCGF,EAJA,WACE,OAAO,0BAAP,iBCyBF,EAvBA,SAAgB,GAad,OAbgD,EAAhCA,WAAgC,EAApBC,iBAapB,0BACN,sBAAOC,KAAK,SACV,kBAFI,OAIN,sBAAOA,KAAK,UACV,kBALJ,S,aCKF,QApBA,WACE,OACE,8BACE,0BADF,iBAEE,0BACE,0BACE,sBAASC,GAAG,SAFhB,SAME,0BACE,sBAASA,GAAG,UAVpB,aCQF,EAPA,SAAa,GAA4C,IAA1CC,EAA0C,EAA1CA,QAASJ,EAAiC,EAAjCA,WACtB,OADuD,EAArBK,YAC1B,sBAAcD,QAASA,GAC3B,kBADI,MAEJ,mBAAQJ,WAAYA,M,aCHpBM,EAAUC,wBAAhB,eAEA,SAASC,EAAMF,GAAiD,6DAAJ,GAAlCN,EAAsC,EAAtCA,WAAsC,IAA1BK,mBAA0B,MAAZ,IAAY,EACxDI,GAAgBC,QAAoB,CAAEL,gBAC5CI,UAAqB,YACdA,oBAAkCA,WAAnC,SAAuEE,WAAoBA,EAA/F,QACEX,OAAgBW,WAAoBA,EAApCX,WAIJ,IAAMC,EAAmB,SAACW,GACnBH,oBAAkCA,WAAnC,SAAJ,GACEA,WAMJ,OAFAI,SAAgB,mBAAKT,QAAL,EAA6BJ,WAA7B,EAAqDK,YAAaA,IAAlFQ,GAEO,CAAEZ,oBAGX,GAAI,EAAS,CACX,IAAMG,GAAUU,UAOhBN,EAAM,EAAS,CAAER,WANE,SAACe,GACbX,oBAA4BA,WAA7B,SAAJ,GACEA,WAIyBC,YAAaM,kBAAoBA,SAASK","file":"240.5fcdf91ee524a86e46c8.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n  return <h3>Home Remote</h3>\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction About() {\n  return <h3>About Remote</h3>\n}\n\nexport default About;\n","import React, { useEffect } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport Home from '../../Pages/Home';\nimport About from '../../Pages/About';\n\nfunction Router({ onNavigate, onParentNavigate }) {\n  // const history = useHistory();\n  //\n  // useEffect(() => {\n  //   const unListen = history.listen((location, action) => {\n  //     onNavigate(location.pathname + location.search);\n  //   });\n  //\n  //   return () => {\n  //     unListen();\n  //   }\n  // }, []);\n\n  return (<Switch>\n    <Route path=\"/home\">\n      <Home />\n    </Route>\n    <Route path=\"/about\">\n      <About />\n    </Route>\n  </Switch>)\n}\n\nexport default Router;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nfunction Header() {\n  return (\n    <header>\n      <h3>Remote Header</h3>\n      <ul>\n        <li>\n          <NavLink to=\"/home\">\n            Home\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\">\n            About\n          </NavLink>\n        </li>\n      </ul>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Router as MemoryRouter } from 'react-router-dom';\nimport Router from '../Router';\nimport Header from '../../Components/Header';\n\nfunction App({ history, onNavigate, initialPath = \"/\" }) {\n  return (<MemoryRouter history={history}>\n      <Header />\n      <Router onNavigate={onNavigate} />\n    </MemoryRouter>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Boot/App';\nimport { createBrowserHistory, createMemoryHistory } from 'history';\n\nconst element = document.getElementById('_react_dash');\n\nfunction mount(element, { onNavigate, initialPath = \"/\" } = {}) {\n  const memoryHistory = createMemoryHistory({ initialPath });\n  memoryHistory.listen((location) => {\n    if ((memoryHistory.location.pathname + memoryHistory.location.search) !== (location.pathname + location.search)) {\n      onNavigate.push(location.pathname + location.search);\n    }\n  });\n\n  const onParentNavigate = (fullpath) => {\n    if ((memoryHistory.location.pathname + memoryHistory.location.search) !== fullpath) {\n      memoryHistory.push(fullpath)\n    }\n  }\n\n  ReactDOM.render(<App history={memoryHistory} onNavigate={onNavigate} initialPath={initialPath} />, element);\n\n  return { onParentNavigate };\n}\n\nif (element) {\n  const history = createBrowserHistory();\n  const onNavigate = (fullPath) => {\n    if ((history.location.pathname + history.location.search) !== fullPath) {\n      history.push(fullPath);\n    }\n  };\n\n  mount(element, { onNavigate, initialPath: location.pathname + location.search });\n}\n\nexport { mount };\n"],"sourceRoot":""}